"use strict";

/**
 *  В этом уроке обсуждается очень важная тема для понимания JavaScript в целом. Тут начинается
 *  разбор такой парадигмы программирования, как объектно-ориентированное программирование и с
 *  одним из его стилей – прототипно-ориентированным программированием.
 */

/**
 *  Когда идёт работа со строкой, то у неё есть такое свойство как длина строки (.length), методы
 *  для изменения в нижний/верхний регистр и т.д.
 *  ---
 *  Примерно так происходит в JS, когда используется метод на строке. Интерпретатор модицифирует
 *  её в объект, проводит необходимые манипуляции, а потом вновь возвращает в примитив:
 *  'str'.length -> {str} -> 4 -> 'str'
 */
let str = 'some';
let strObj = new String(str);

console.log(typeof(str)); // -> string
console.log(typeof(strObj)); // -> object

/**
 *  Когда создаются строки или массивы, они все могут содержать разное наполнение, но каждый из
 *  них обладает одними и теми же методами.
 *  ---
 *  То есть, когда создаётся массив, создаётся новый экземпляр прототипа массивов.
 */
console.dir([1, 2, 3]);
/**
 *  В свойстве __proto__ можно найти все методы, которые могут применяться к массивам.
 *  ---
 *  Важно также то, что в конце свойства __proto__ этого массива, далее идёт ещё одно __proto__, но
 *  оно уже ссылается к объекту. И так со всеми другими типами данных (function, number, string...)
 *  !!! Потому объект – самая главная структура в JS.
 */

/**
 *  В реальных проектах нужно будет создавать объекты, которые будут прототипно наследоваться друг от друга.
 *  Тоесть такая же структура, какая была описана выше, будет формироваться вручную во время разработки.
 *  Это будет делаться очень часто, особенно в библиотеке React.
 *  ---
 *  Разбор на самых банальных примерах:
 */
const soldier = { // Это большой прототип, который описывает всех солдат
    health: 400,
    armor: 100,
    sayHello: function() {
        console.log('Hello!');
    }
};
// Создаём модифицированную версию (например, рядовой)
const john = {
    health: 100
};
/**
 *  Нужно установить связь, чтобы Джон умел делать всё, что и солдат, но чтобы некоторые свойства, в зависимости
 *  от его специфики, были модифицированы (например, здоровье).
 *  ---
 *  Устаревший формат (существует в старых проектах, но в новых его использовать не стоит):
 */
john.__proto__ = soldier; // -> солдат – это прототип Джона
console.log(john.armor); // -> 100 (Джон получил свойства, которые базируются у его прототипа)
john.sayHello();
/**
 *  Прототип позволяет создавать своеобразные миксины по типу Sass (например, свойства и методы модального окна).
 *  Потом эти свойства и методы можно использовать в других модальных окнах, но уже изменять их под свои нужды.
 */

/**
 *  Вместо __proto__ нужно использовать такие команды как:
 *  ---
 *  1) Object.setPrototypeOf() – установить прототип.
 *  Принимает в себя два аргумента:
 *  - первый аргумент – объект, которому нужно назначить прототип;
 *  - второй аргумент – объект, прототип которого устанавливается.
 */
Object.setPrototypeOf(john, soldier);
/**
 *  2) Object.create() – создать новый объект.
 *  На практике изначально не нужно создавать объект прототипа, он создаётся по мере работы с ним.
 */
const newJohn = Object.create(soldier); // newJohn ещё ничего не содержит, но уже умеет всё делать с soldier
/**
 *  3) Object.getPrototypeOf() – получить прототип. Будет рассмотрен дальше по курсу.
 */

/**
 *  Итоги урока:
 *  - В этом уроке началось знакомство с парадигмой программирования.
 *  - ООП – это наука о том, как создавать правильную архитектуру.
 *  - JavaScript – это прототипно-ориентированный язык программирования, частный случай ООП.
 */