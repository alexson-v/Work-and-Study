"use strict";

/**
 *  В этом уроке обсуждается использование веб-страницы для работы с JavaScript. В прогограммировании всегда идёт
 *  работа с информацией. Мы научимся получать со страницы различные элементы и проводить с ними простейшие
 *  операции.
 *  ---
 *  DOM (Document Object Model) – объектная модель документа.
 *  Весь html-код является ничем иным, как обычным документом, точно так же, как и в ворде, у которого есть своя
 *  структура. Она создаётся во время вёрстки, и не важно, веб-сайт это или веб-приложение.
 *  ---
 *  Когда такой документ сформирован, его можно представить в виде обычного объекта. Как у любого объекта, у
 *  этого документа могут быть свои методы. Они будут использоваться, чтобы иметь доступ к любым элементам на
 *  странице.
 */

/**
 *  Чтобы обратиться к документу, нужно использовать такую сущность, как document.
 *  ---
 *  Методы для получения элементов, в свою очередь, можно разделить на две категории:
 *  1) Которые давно существуют (устоявшиеся)
 *  2) Которые появились недавно
 */

/**
 *  Начнём с давних методов, чтобы точно знать все варианты и понимать, как работает код в целом:
 *  ---
 *  1) Метод getElementById() – получить со страницы элемент по уникальному идентификатору (id).
 */
const box = document.getElementById('box'); // -> значение id обязательно записывается через строку '...'
/**
 *  !! В консоли VS Code нет доступа к объекту document. Там console.log() работать не будет.
 *  Нужно запускать только в браузерах.
 */
console.log(box); // -> div#box.box (получен элемент html-страницы)

// 2) Метод getElementsByTagName() – получить со страницы элемент по тэгу (<...>).
let btns = document.getElementsByTagName('button');
/**
 *  !! В переменную btns получен не один элемент, а целый псевдомассив – html-коллекция.
 *  Даже если это будет одна кнопка – все равно она будет в псевдомассиве.
 */
console.log(btns); // -> [button, button, button, button, button]

// Получить конкретный элемент можно таким образом:
btns = document.getElementsByTagName('button')[1]; // -> Выбрать элемент с индексом 1 из псевдоколлекции выше.
console.log(btns);

// 3) Метод getElementsByClassName() – получить со страницы элемент по классу (.class)
const circles = document.getElementsByClassName('circle'); // !! В начале не ставится точка, просто название.
console.log(circles); // -> [div.circle, div.circle, div.circle] – получем тот же псевдомассив.

// 4) Метод getElementsByName() – получить со страницы элемент по атрибуту name (name="elname"). Никто не пользуется.

/**
 *  Методы для получения элементов, которые появились недавно:
 *  ---
 *  1) Метод querySelectorAll() – синтаксически устроен так, что в него помещается абсолютно любой без
 *  ограничений CSS-селектор (#id .class button a:hover и т.д.). Намного удобнее в работе, чем предыдущие методы.
 */
const hearts = document.querySelectorAll('.heart');
// !! У метода querySelectorAll(), в отличии от других методов, псевдомассив имеет Метод forEach().
hearts.forEach(item => {
    console.log(item);
});

// 2) Метод querySelector() – получить со страницы первый из элементов под конкретным CSS-селектором.
const oneHeart = document.querySelector('.heart');
console.log(oneHeart);

/**
 *  Итоги урока:
 *  - Существуют методы, которые работают на объектной модели документа (DOM) – document, который работает только
 *    внутри браузера.
 *  - У document есть только два метода для того, чтобы получать только один элемент – getElementById() и querySelector().
 *  - Можно получать html-коллекции (псевдомассивы) с помощью методов getElementsByTagName(), getElementsByClassName(),
 *    getElementsByName() и querySelectorAll().
 *  - Чтобы использовать элементы из html-коллекций, нужно обращаться к ним по индексу [~].
 *  - Обозначать точками, решётками (и т.д.) элементы нужно только в методах querySelectorAll() и querySelector(). В остальных методах
 *    и так подразумевается, что будет введён конкретный тип селектора.
 */