"use strict";

/**
 *  Примеры условий из жизни:
 *  ---
 *  1) "Если в холодильнике пусто, то вы останетесь голодным" - в этой ситуации есть типичное
 *  условие и последствие выполнения этого условия.
 *  2) "Если на светофоре зелёный цвет, то вы её (дорогу) переходите. Если красный - ждёте,
 *  пока загорится зелёный".
 *  3) "Пока пользователь не авторизован на сайте, ему не показывается блок вёрстки".
 *  
 *  Конечно, в начале будут примеры попроще, но логика всегда одинаковая.
 */

/**
 *  Оператор if - с него начинаются все условия.
 *  ---
 *  По синтаксису это выглядит так:
 *  if (условия, которые нужно проверить) {что должно случиться, если это условие верно}
 *  ---
 *  ! Условия операторов всегда в конченом счёте преобразуются в булиновое значение - boolean (true/false).
 *    Это делается для того, чтобы проверить условие на правдивость.
 */
if (4 == 9) {            
    console.log('Ok!');
} else {
    /**
     *  Оператор else - вторая часть условий, которая применяется в той случае, когда предыдущая
     *  часть показала false.
     */
    console.log('Error');
}

if (1) {
    console.log("Ok!"); // -> true, так как все числа, кроме 0 и null дают boolean true.
    // О таких особенностях чуть позже по курсу.
}

/**
 *  Оператор else if (условие) - с помощью него можно также задавать дополнительные параметры.
 */
const num = 50;
if (num < 49) {
    console.log('Error');
} else if (num > 100) {
    /**
     *  Если первое условие будет false, проверяются параметры другого условия. Так может быть до
     *  бесконечности.
     */
    console.log('SuperError');
} else {
    console.log('Ok!');
}

/**
 *  Тернарный оператор - позволяет существенно сократить код, использует в своей работе всего 3 аргумента.
 *  Это единственный тернарный оператор, который есть в JavaScript на текущий момент.
 */
const ternOp = (num === 50) ? console.log('Ok!') : console.log('Error');

/**
 *  4 + 4 -> бинарный аргумент (плюс).
 *  +'4' -> унарный аргумент.
 */

/**
 *  Если быть реалистом, становится понятно, что если в конструкции if + else if много веток, то
 *  это не удобно использовать. Чтобы избежать этого, существует специальная конструкция.
 *  ---
 *  Switch - это модификация if, которая поддерживает сразу несколько проверок и условий.
 */
const simpleNum = 50;
switch (simpleNum) {
    case 49: // Конструция switch всегда совершает только строгое сравнение, в отличии от других конструкций (===).
        console.log('Неверно');
        break;
        /**
         *  После каждого действия необходимо записывать ключевое слово break. Это обязательная
         *  синтаксическая конструкция.
         */
    case 100:
        console.log('Неверно');
        break;
    case 50:
        console.log('В точку');
        break;
    default: // используется в самом конце как действие по-умолчанию, если ничего не подошло.
        console.log('Не в этот раз');
        break;
}
// В целом, эта конструкция очень часто используется в продвинутых библиотеках JS, например, Redux.