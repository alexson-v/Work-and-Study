"use strict";

/**
 *  В этом уроке обсуждается вложенность циклов. Для новичков этот вопрос может показаться неочевидным.
 *  --
 *  - Пример вложенности циклов: обычный жизненный цикл, о котором говорилось ранее, но наш
 *    день также складывается из иных наборов действий - готовка, занятия спортом, процесс употребления
 *    пищи и т.д.
 *  - Пример в JavaScript: цикл перебирает данные; если цикл натыкается на массив, то его перебирает
 *    другой цикл.
 *  - Вывод: вложенность циклов имеет место быть, когда совершаются итеративные действия внутри других,
 *    более глобальных.
 */

// Самый базовый пример вложенности циклов:
for (let i = 0; i < 3; i++) {
    console.log(i);
    for (let j = 0; j < 3; j++) {
        // Во вложенных циклах в качестве итератора используют буквы j, k ..., чтобы не было коллизии переменных.
        console.log(j);
        // ...
    }
}

/**
 *  !!Тем неменее, с вложенностями не стоит переусердствовать. В зависимости от сложности задачи, существуют
 *  определённые ограничения на вложенность, связанные с памятью.
 *  Код с кучей таких вложенностей будет банально нечитабелен.
 */

/**
 *  Классическая задача на вложенность циклов:
 *  *
 *  **
 *  ***
 *  ****
 *  *****
 *  ******
 */

let result = '';
const figureLength = 7;

for (let i = 1; i < figureLength; i++) {
    for (let j = 0; j < i; j++) {
        result += '*';
    }
    result += '\n'; // "\n" - перенос строки
}
console.log(result);

/**
 *  В прошлом уроке уже упоминалось о таких ключевых словах как break и continue.
 *  Пора продолжить эту тему.
 *  ---
 *  Пример из реальной жизни: каждый день повторяется и внутри каждого дня повторяется приготовление пищи и
 *  мытьё посуды. Готовя ужин, человек так устал, что хочет поспать и помыть посуду уже с новыми силами, в
 *  следующем дневном цикле.
 *  ---
 *  Как сделать так, чтобы остановить вложенный цикл, либо перейти к следующей итерации большого
 *  (главного) цикла?
 */
first: for (let i = 0; i < 3; i++) { // "first:" - это метка
    console.log(`First level: ${i}`);
    for (let j = 0; j < 3; j++) {
        console.log(`Second level: ${j}`);
        for (let k = 0; k < 3; k++) {
            /**
             *  В данном случае у третьего уровня никогда не будет значения 2, мы сбрасываем это действие
             *  в самое начало цикла (на первый уровень) с помощью метки "first". Тем самым начинается следующая
             *  итерация.
             */
            if (k === 2) {
                continue first;
            }
            console.log(`Third level: ${k}`);
        }
    }
}