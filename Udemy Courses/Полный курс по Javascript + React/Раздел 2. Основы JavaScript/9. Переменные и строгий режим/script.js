"use strict";
/**
 *  Эта директива в начале скриптового документа извещает о том, что разработка ведётся в
 *  современном (строгом) режиме. Тут убраны неточности, связаны с предыдущими релизами
 *  ES и которые невозможно удалить.
 */

/**
 *  Переменная - это хранилище информации, которая может использоваться для тех или иных целей.
 *  ---
 *  JS-переменные можно объявить тремя способами. О них ниже.
 */

// 1) let - информацию внутри переменной можно будет изменить.
let number = 5;
number = 10;
console.log(number);

// 2) const - константа, изменить будет невозможно. Использовать const, где это возможно, является хорошим тоном.
const leftBorderWidth = 1;
/**
 *  Но у const есть одна хитрость. Прямых констант в JS не существует. Пример, в котором можно изменить
 *  объект, даже не смотря на то, что он объявлен в const.
 */
const obj = {
    a : 50
};
obj.a = 10;
console.log(obj); // -> a: 10

/**
 *  Имя переменной может состоять из букв, цифр, симовлов доллара и нижнего подчёркивания.
 *  Но цифры и, например, * нельзя ставить в начале переменной.
 *  ---
 *  Также названия переменных не должны повторять зарезервированные слова JavaScript
 *  (например, error, alert и т.д.)
 *  ---
 *  CamelCase - когда длинная переменная записывается в некоторых местах большими буквами для
 *  лучшего воспрятия.
 *  ---
 *  Переменные, написанные в разном регистре - это разные переменные. Например, number и NUmber.
 */

// 3) var - устаревший вариант задания переменной. В своём коде не нужно это использовать.
console.log(name);
/**
 *  Главная проблема var в том, что её можно вызвать до того, как она была объявлена в коде. Приводит к undefined.
 *  Это называется hoisting - всплытие переменной.
 */
var name = 'Ivan';

{ // Также var не изолируется локально, например, в функции. let и const - да.
    var result = 50;
}
console.log(result);