"use strict";

/**
 *  В этом уроке будут обсуждаться типы информации, с которыми можно взаимодействовать в
 *  JavaScript.
 *  ---
 *  На данный момент существует 8 типов данных.
 * 
 *  Все типы данных можно разделить на две большие категории:
 *  1) Простые типы (примитивы);
 *  2) Комплексные типы (объекты).
 */

/**
 *  К простым типам данных (примитивам) относятся:
 */

// 1) Числа (1, 2, 3, ...). Могут быть не только целыми, но и дробными.
let fullNumber = 7;
let frNumber = 4.6;
/**
 *  Infinity - числовой тип данных, обозначает бесконечность и относится к примитивам.
 *  ---
 *  Снизу 4/0 -> Infinity. Математически это выражение неверно, поэтому JS выведет такое значение.
 *  ! В некоторых случаях такое поведение может обезопасить от ошибок.
 */
console.log(4/0);
console.log(-4/0); // Аналогично с предыдущим, только будет -Infinity.
/**
 *  NaN (Not a Number) - числовой тип данных. Имеет место быть при проведении математических
 *  операций с нечислами.
 */
console.log('string' * 9); // -> NaN


// 2) Строки - это набор данных, которые можно описать словами ('string', 'name').
const ordTicks = 'sample',
      dualTicks = "sample",
      backTicks = `sample`;
/**
 *  Кавычки - обязательный атрибут строк. Любая строка должна быть в них.
 *  В классическом JS нет разницы, какие использовать кавычки.
 *  1) 'sample' - одинарные кавычки.
 *  2) "sample" - двойные кавычки.
 *  3) `sample` - косые кавычки (backticks) имеют свою особенность. Об этом в следующих уроках.
 */


// 3) Логический тип данных (boolean) -> true/false.
const bool = true;

// 4) Null - специфический тип данных. Обозначает состояние, когда что-то попросту не существует.
console.log('something'); // -> приводит к ошибке "not defined", нельзя сослаться на несуществующий объект

// 5) Undefined - когда что-тот существует, но не содержит значения.
let und;
console.log(und); // -> undefined. "Невозможно вытрусить из пустого холодильника бутылку молока".

/**
 *  6) Symbol - это новый тип данных, на практике практически не используется.
 *  ---
 *  7) BigInt - тоже новый тип, который отображает огромные числа. При работе с обычными числами
 *  невозможно задать число, которое будет больше 2*53. Именно для решения этой проблемы был создан BigInt.
 */


/**
 *  Объект - это коллекция данных, структура которой используется для хранения абсолютно
 *  любых данных (включительно тех типов, о которых говорилось ранее).
 *  ---
 *  К комплексным типам данных (объектам) относятся:
 */

// 1) Обыкновенный объект.
const obj = { // объявление объекта внутри переменной.
    name: "John",
    age: 25, // Всё, что находится в пределах фигурных скобок - свойства объекта.
    isMarried: false
};

/**
 *  Если стоит задача добраться до значения определённого свойства объекта, то это можно
 *  сделать двумя способами:
 */

// 1) Через точку
console.log(obj.name);

// 2) Через квадратные скобки (устаревший вариант)
//console.log(obj["name"]);

/**
 *  Массив - частный случай объекта, его фрагменты хранятся строго по порядку.
 *  ! Не является отдельным типом данных.
 *  ---
 *  Каждый элемент массива имеет свой порядковый номер. Начинается с нуля -> 0.
 */

let arr = ['plum.png', 'orange.jpg', 6, 'apple.bmp', {}, []];
console.log(arr[1]); // -> 'orange.jpg'. Обращение к элементу по его порядковому номеру.