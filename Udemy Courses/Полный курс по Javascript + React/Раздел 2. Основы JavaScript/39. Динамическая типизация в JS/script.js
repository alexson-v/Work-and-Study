"use strict";

/**
 *  В этом уроке обсуждается ещё одна особенность JavaScript – динамическая типизация.
 *  Динамическая типизация – это возможность одного типа данных превращаться в другой тип данных.
 *  ---
 *  Например число -> строка, строка -> число, объект -> булиновое значение.
 *  ---
 *  Стоит отметить, что в мире программирования, в других языках, есть и статическая типизация, где,
 *  например, число всегда остаётся числом.
 */

/**
 *  Разберём динамическую типизацию на примерах.
 *  ---
 *  Когда необходимо что-либо превратить в строку (to String):
 *  1) String() – самый старый и редкоиспользуемый способ
 */
console.log(typeof(String(null))); // -> string
console.log(String(4)); // -> '4'
/**
 *  2) Конкатенация – сложение строки с другим типом данных возвращает строку.
 */
console.log(5 + ''); // -> '5'

const num = 5;
console.log('https://facebook.com/groups/' + num); // -> 'https://facebook.com/groups/5'

const fontSize = 26 + 'px'; // -> '26px'

/**
 *  Когда необходимо что-либо превратить в число (to Number):
 *  1) Number() – идентичен к аналогичному способу строки, но им пользуются ещё реже.
 */
console.log(typeof(Number('2'))); // -> number
console.log(Number('15')); // -> 15
/**
 *  2) Унарный плюс (+) – знак плюса, который ставится перед другим типом данных.
 */
console.log(typeof(+'5')); // -> number
/**
 *  3) С помощью методов чисел, например, parseInt().
 */
console.log(typeof(parseInt('15px', 10))); // -> number

/**
 *  Когда необходимо что-либо превратить в булиновое значение (to Boolean):
 *  ---
 *  Имеют значение false: 0, '', null, undefined, NaN. Всё остальное, что существует в JavaScript
 *  (даже пустые объекты, массивы, строки с пробелами), будет правдой в логическом контексте.
 *  ---
 *  1) Нативный способ – через условия.
 */
let switcher = null;
if (switcher) {
    console.log('Working...'); // -> условие не сработает, switcher === null === false
}
switcher = 1;
if (switcher) {
    console.log('Working...'); // -> 'Working...'
}
/**
 *  2) Boolean() – одинаковый контекст, что и у String() и Number(). Никто не пользуется, так как есть
 *  нативный способ.
 */
console.log(typeof(Boolean(1))); // -> boolean
console.log(Boolean(1)); // -> true
/**
 *  3) Два знака отрицания (!!) – это очень редкий способ и мало кто о нём знает. Нужно помнить, что
 *  существует и такой подход.
 */
console.log(typeof(!!4)); // -> boolean
console.log(!!4); // -> true