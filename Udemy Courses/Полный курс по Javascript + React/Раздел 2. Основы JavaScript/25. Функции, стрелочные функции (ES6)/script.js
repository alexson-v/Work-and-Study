"use strict";

/**
 *  В этом уроке разбирается, что такое функция, как это работает, как их можно применять и что
 *  было добавлено в новом стандарте.
 *  ---
 *  Функции - это определённые действия в JavaScript. Они используют различные типы данных и изменяют
 *  информацию таким образом, каким указано разработчиком.
 *  Они также существенно уменьшают величину кода.
 *  
 *  В реальной жизни набором функций владеют, например, кулькулятор, холодильник, микроволновка и т.д.
 */

// Пример обыкновенной функции
function showFirstMessage() {
    /**
     *  showFirstMessage - cуществует негласное правило, что имя функции должно быть глаголом с припиской того,
     *  над чем выполняются действия.
     */
    console.log('Hello world!');
}
showFirstMessage("Hello World!"); // ! Функцию недостаточно написать, её ещё необходимо вызвать.

/**
 *  В круглых скобках записываются аргументы функции (определённые данные), которыми функция при запуске
 *  может оперировать. Аргументов у функции может быть бесконечное количество.
 */
function getsSomeArgs(arg, num, text) {
    console.log(`I have got some args: ${arg}, ${num}, ${text}. I am happy! :)`);
}
getsSomeArgs(true, 4, 'some text'); // при вызове функции эти аргументы можно заполнить через запятую.

// Как ведут себя переменные внутри функций?
let num = 25;
/**
 *  Глобальная переменная - объявляется за пределами всех конструкций и распостраняется на весь документ.
 *  Её можно использовать, например, в той же функции и локально изменять.
 */
function learnFunctionNums() {
    num = 20; // Локальная переменная - если переменная объявлена внутри функции, то снаружи она не доступна.
}
console.log(num); // -> 25 (в данном случае попадает значение глобальной переменной)

// !! Процесс явления "замыкание функции"
let closureNum = 50;
/**
 *  Замыкание функции - это сама функция со всеми внешними переменными, которые ей доступны.
 *  Если подходящая локальная переменная отсутствует, функция начнёт искать её на глобальном уровне.
 */
function showFunctionClosure() {
    // let closureNum = 35;
    console.log(closureNum);
}

/**
 *  Функция может вернуть наружу какое-либо значение с помощью ключевого слова "return".
 *  Как только функция увидит return, она прекратит своё действие.
 */
function calc(a, b) {
    return (a + b);
    // Код в функции, который стоит после return, называется unreacheable.
}
console.log(calc(4, 3)); // -> 7

function returnFunctionValue() {
    let numReturn = 50;
    return numReturn; // -> 50 возвращается во "внешний мир"
}
const externalNum = returnFunctionValue(); // Значение numReturn было записано во внешнюю переменную.

/**
 *  Классификация функций:
 *  ---
 *  1) Function Declaration - существует ещё до того, как запустится код. Следовательно, её можно вызвать
 *     ещё до того, как она будет объявлена. Это не будет ошибкой, как в случае с var.
 *     P.S. в некоторых стилистиках отдаётся предпочтение держать функции внизу кода, а вызывать - сверху.
 */
showDecFunction(); // -> 'some text'
function showDecFunction() {
    console.log('some text');
}
/**
 *  2) Function Expression - создаётся только тогда, когда доходит поток кода. Можно вызвать только
 *     после объявления.
 *     После фигурных скобок обязательно нужно ставить ; (так как это по факту переменная).
 */
const showExprFunction = function() {
    console.log('Hello world!');
};
showExprFunction();
/**
 *  3) Стрелочная функция - была добавлена в стандарте ES6. Её синтаксис позволяет существенно сократить код.
 *     Её главная особенность в том, что она не имеет контекста вызова (this). Везде её использовать нельзя.
 */
const showArrowFunction = (a, b) => a + b; // если функция идёт только в одну строку, то можно опускать фигурные скобки.

const showArrowClassicFunction = (a, b) => {
    console.log('Hello world');
    return a + b;
};