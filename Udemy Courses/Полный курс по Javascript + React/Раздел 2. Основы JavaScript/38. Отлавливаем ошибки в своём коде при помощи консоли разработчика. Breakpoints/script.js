"use strict";

/**
 *  В этом уроке обсуждается именно тот инструмент, с которым нужно будет встречаться постоянно –
 *  консоль разработчика.
 *  Пришла пора выйти за рамки обычного console.log() и узнать о ней побольше.
 */

/**
 *  Вкратце о каждой из вкладок в консоли разработчика:
 *  1) Elements – это html-структура, стили тэгов, можно смотреть псевдоклассы, псевдоселекторы и т.д.
 *  2) Sources – это вкладка со всеми исходными материалами открытого проекта. Тут можно посмотреть
 *     на то, из чего состоит сайт.
 *  3) Network – вкладка отвечает за работу с сетью. Тут можно отслеживать, как быстро подгружаются
 *     те или иные вещи (скрипты, картинки, html-структуры).
 *     Самое главное – здесь можно отслеживать запросы, которые будут уходить на сайты (получить/отправить данные).
 *  4) Performance – можно записать то, как работает/загружается структура.
 *  5) Memory
 *  6) Application – дальше по курсу.
 *  7) Security, Audits – отдельные вещи (вёрстка).
 */

/**
 *  Возникает вопрос: как дебажить код? Как получать промежуточные результаты, которые возникают на том или ином
 *  шаге выполнения программы?
 *  ---
 *  Как раз таки для этого и нужна вкладка Sources. Здесь можно устанавливать так называемые breakpoints.
 *  Breakpoints – это метки, которые позволяют останавливать выполнение кода в определённом участке.
 *  Устанавливаются обычным нажатием по номеру строки.
 *  ---
 *  - В начале вкладки Sources можно пройтись по заданным breakpoint'ам и посмотреть работу отдельных функций/кода.
 *  - В 'Call Stack' можно узнать, как код пришёл к строке breakpont'а. Тут показывается именно последовательность
 *    операций.
 *  - В 'Scope' показываются переменные, с которыми на конкретной строке ведутся операции. Также тут идёт разделение
 *    на глобальные и локальные переменные.
 *  - Дальше идут и другие субменю, но они пока что ни о чём не говорят.
 */

/**
 *  Консоль разработчика всегда укажет на ошибку, особенно во вкладке 'Sources' эти ошибки довольно наглядно
 *  показываются.
 *  ---
 *  !! Универсальных примеров по эффективному дебаггингу кода не существует. Это всё набивается с опытом.
 */

function sayHelloWorld() {
    console.log('Hello world');
    debugger;
    /**
     *  debugger – это ключевое слово. Если его поставить где-либо в коде, то во вкладке оно отобразится в качестве
     *  нативной метки.
     */
}
sayHelloWorld();

function sayHi() {
    console.log('Hi!');
}
sayHi();

const arr = [1, 14, 4, 30, 54],
      sorted = arr.sort(compareNum);
function compareNum(a, b) {
    return a - b;
}
console.log(sorted);