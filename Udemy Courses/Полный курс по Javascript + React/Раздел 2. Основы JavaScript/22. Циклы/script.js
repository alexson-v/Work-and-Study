"use strict";

/**
 *  Все технические средства и программы, созданные когда-либо человеком, направлены на автоматизацию
 *  процесса и облегчения труда. Так заменяются однотипные человеческие действия.
 *  Также и в программировании. Вместо того, чтобы много раз писать одни и те же команды, следует
 *  заменить это циклом, который сделает всё за нас.
 */

/**
 *  Пример из жизни - "дневной цикл":
 *  1) Просыпаемся
 *  2) Завтракаем
 *  3) Идём на работу
 *  4) Работаем
 *  5) Обедаем
 *  6) Возвращаемся с работы
 *  7) Вечером занимаемся какими-либо своими делами
 *  8) Ложимся спать
 * 
 *  ..утром всё повторяется.
 *  
 *  То же самое можно сказать про цикличность месяцев в году. Каждый код они повторяются.
 */

/**
 *  В JavaScript циклы реализуются тремя способами. Каждый из них необходимо использовать в зависимости
 *  от ситуации.
 */

 let num = 50;

// 1) Цикл while - пока условие выполняется, будут совершаться определённые действия.
while (num <= 55) {
    console.log(num);
    num++;
}

// 2) Цикл do...while - сначала заставить что-нибудь сделать, а затем проверить условие, или выйти из цикла.
do {
    console.log(num);
    num++;
}
while(num <= 55);

/**
 *  3) Цикл for - cамый частоиспользующийся цикл. Популярный, ибо его можно очень подробно настроить.
 *     ---
 *     1. Условие должно состоять из трёх аргументов, но они не обязательны.
 *     2. Обычно в качестве первого аргумента цикла задаётся переменная i - итератор.
 */
for (let i = 1; i < 8; i++) {
    if(i === 6) {
        break;  // Прервать цикл (закончить выполнение).
    }
    console.log(i);
}
/**
 *  Например, лишь пара строк кода с циклом помогут создать бесконечное количество новыъ товаров в интернет-магазине.
 *  !!! В JavaScript можно запросто создать бесконечный цикл, из-за которого ПК может зависнуть. Осторожно!
 */

for (let i = 1; i < 8; i++) {
    if(i === 6) {
        continue;  // Пропустить один пункт и продолжить дальше (в данном случае - цифру 6).
    }
    console.log(i);
}