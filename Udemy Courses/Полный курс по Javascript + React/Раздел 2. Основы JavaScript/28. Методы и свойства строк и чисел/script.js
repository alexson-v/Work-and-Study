"use strict";

/**
 *  В этом уроке разбираются такие понятия как методы и свойства строк и чисел.
 *  ---
 *  Методы - это вспомогательные функции.
 *  Свойства - это вспомогательные значения.
 *  ---
 *  На самом деле их очень много и учить их наизусть не нужно. В этом уроке будут рассмотрены только самые
 *  основные из них.
 */

/**
 *  Свойства и методы строк:
 * 
 *  1) Свойство length - частоиспользуемое свойство для получения длинны как строки, так и других типов данных.
 *     ---
 *     P.S. Необходимо обратить особое внимание, что свойства не вызываются (в отличии от методов). Они просто
 *     пишутся через точку, например, 'arr.length'.
 *     Методы же, которые являются вспомогательными функциями, уже будут вызываться, например, parseInt()
 */
const str = 'test';
console.log(str.length); // -> 4

const arr = [1, 2, 4];
console.log(arr.length); // -> 3 (c помощью свойства length получаем количество элементов массива)

/**
 *  2) Метод toUpperCase() - свести строку в верхний регистр.
 *  ---
 *  !! После методов всегда необходимо ставить круглые скобки (), так как они совершают определённые действия
 *  (ситуация подобна функциям).
 */
const stringCapital = 'javascript';
console.log(stringCapital[2]); // -> 'v' (получить часть строки через индекс)
console.log(stringCapital.toUpperCase()); // -> JAVASCRIPT

/**
 *  3) Метод toLowerCase() - свести строку в нижний регистр.
 *  ---
 *  На практике применять изменения регистров можно при обработке получаемой информации от пользователей.
 *  Допустим, пользователь сделал ошибку при вводе ФИО. Чтобы унифицировать все ответы и подать в базу данных
 *  информацию без ошибок, нужно первоначально проработать регистр.
 */
const stringLow = 'JAVA';
console.log(stringLow.toLowerCase()); // -> 'java'

/**
 *  4) Метод indexOf() - "поиск подстроки", найти часть строки и узнать, с какого индекса (позиции) она начинается.
 *     В этом методе уже во внутрь принимается аргумент - искомое значение.
 *     ---
 *     Если метод не найдёт искомое значение, будет результат '-1'.
 */
const fruit = "Some fruit";
console.log(fruit.indexOf("fruit")); // -> 5

/**
 *  5) Метод slice() - вырезать часть строки с возможностью использовать её в дальнейшем.
 *     Принимает максимум два аргумента: начало и конец индекса, между которыми нужно произвести вырезание.
 *     ---
 *     Особенность: последняя позиция в индексе работает по такому принципу: "вырезать до, но не включать в вырезанное".
 *     !! Метод поддерживает отрицательные значения.
 */
const logg = "Hello world";
console.log(logg.slice(6, 11)); // -> 'world'

/**
 *  6) Метод substring() - очень похож на slice(). Разница лишь в том, что тут можно задавать первый аргумент больше,
 *     чем второй (не стоит так делать), а также substring() не поддерживает отрицательные значения.
 */
console.log(logg.substring(6, 11)); // -> 'world'

/**
 *  7) Метод substr() - главная разница в том, что вместо второго аргумента конца указывается длинна (сколько символов
 *     необходимо вырезать?).
 */
console.log(logg.substr(6, 5)); // -> 'world'

/**
 *  Основные методы чисел:
 *  ---
 *  Для работы с числами в JavaScript есть отдельная мини-библиотека, которая существует внутри браузеров - Math.
 *  В ней очень много различных математических вещей - свойств и методов.
 *  
 *  1) Метод Math.round() - округлить число до ближайшего целого. Единственный в своём роде метод, который используется
 *     на практике в вебе.
 */
const num = 12.2;
console.log(Math.round(num)); // -> 12

// 2) Метод parseInt() - перевести число в другую систему исчисления.
const test = "12.2px";
console.log(parseInt(test)); // "12.2" -> 12 (числовой тип данных)

// 3 Метод parseFloat() - взять число/строку и вернуть её в десятичном варианте.
console.log(parseFloat(test)); // "12.2" -> 12.2 (числовой тип данных)