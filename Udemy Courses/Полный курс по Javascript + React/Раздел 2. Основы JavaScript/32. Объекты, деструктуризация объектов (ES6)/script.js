"use strict";

/**
 *  Этот урок посвящен такому понятию как объект, а также его методам.
 *  ---
 *  Объекты - это ассоциативные массивы, которые присутствуют и в других языках программирования,
 *  например, в PHP.
 */

// Устаревший способ создания объекта, обычно им никто не пользуется
const obj = new Object();

// Самый простой объект, о котором говорилось в ранних уроках
const options = {
    name: 'test',
    width: 1024,
    height: 1024,
    colors: {
        border: 'black',
        bg: 'red'
    },
    makeTest: function() { // создаём свой собственный метод объекта
        console.log('test');
    }
};

console.log(options.name); // обращаемся к свойству объекта через точку
delete options.name; // удалить свойство объекта
console.log(options); // получить весь объект

// Через цикл можно перебрать свойства объекта и провести с ними какие-нибудь операции
let counter = 0;
for (let key in options) { // -> цикл будет работать столько раз, сколько будет свойств у объекта
    /**
     *  Так как в объекте options {...} есть ещё один объект colors {...}, JavaScript не может
     *  прочитать его через строку.
     *  ---
     *  Таким образом, с помощью проверки на typeof можно вмешаться в значения внутри первого значения
     *  объекта и сделать их читаемыми.
     */
    if (typeof (options[key]) === 'object') {
        for (let i in options[key]) {
            console.log(`Свойство ${key} имеет значение ${options[key][i]}`);
            counter++; // счётчик количества свойств
        }
    } else {
        console.log(`Свойство ${key} имеет значение ${options[key]}`);
        counter++;
    }
}
console.log(counter); // -> Узнать, сколько всего свойств в объекте

// Методы, которые используются у объектов:
console.log(Object.keys(options)); // Метод Object.keys() - получить массив со всеми свойствами объекта.
console.log(Object.keys(options).length); // -> 4 (в последствии можно также узнать и длинну свойств объекта).

/**
 *  Стандартных (встроенных) методов у объекта очень много, их не нужно все заучивать наизусть.
 *  Но также можно создавать и свои собственные методы, например:
 */
options.makeTest(); // Вызов метода по ключу (смотреть в самом объекте options {...} ).

/**
 *  Деструктуризация объекта - новая возможность, появилась в стандарте ES6. С помощью неё можно дробить сложные
 *  конструкции на примитивы, например:
 */
const {border, bg} = options.colors; // Вытягиваем элементы свойства, которые находятся во вложенном объекте.
console.log(border); // -> 'black'
console.log(bg); // -> 'red'

/**
 *  Итоги урока:
 *  1) Объекты - это структуры, которые могут сохранять в себе абсолютно любые типы данных в формате "ключ-значение".
 *  2) Объекты могут также быть вложенными.
 *  3) Чтобы перебирать вложенные объекты, можно использовать такую конструкцию как for-in и внутри делать что угодно
 *  как с ключами, так и со значениями этих ключей.
 *  4) У объектов бывают встроенные методы и встроенные свойства.
 *  5) Внутрь объекта можно записывать функции и таким образом создавать его кастомные методы.
 */