"use strict";

/**
 *  В этом уроке более подробно обговариваются конкретно логические операторы. Полезно для тех людей,
 *  которые редко сталкивались с задачами логического типа. В программировании на этом построено довольно многое.
 * 
 *  Все эти операторы что-то возвращают, дают какой-либо результат (true/false).
 * 
 *  К логическим операторам относятся:
 */

// 1) && - логическое "И".

const hamburger = 3;
const fries = 1;
const cola = 0;
if (hamburger === 3 && fries && cola) {
    console.log('Все сыты!');
} else {
    console.log('Мы уходим.');
}

/**
 *  Когда логические операторы работают с данными, которые не true, но и не false, они будут возвращать
 *  сами значения, с которыми они работают.
 *  ---
 *  Конкретно в этом примере оператор "и" возвращает первое ложное значение, на котором он остановился.
 *  ~ Аналогично, если будет true, то оператор "и" вернет последний проработанный операнд.
 */
console.log(hamburger === 3 && fries && cola); // -> O
// Другие примеры:
console.log(1 && 0); // -> 0
console.log(1 && 5); // -> 5
console.log(null && 5); // -> null
console.log(0 && 'случайная строка'); // -> 0

/**
 *  ! В JavaScript есть 5 сущностей, которые всегда будут false: 0, '', null, undefined, Not a Number.
 *    Всё остальное всегда будет true.
 */

/**
 *  2) Логическое "ИЛИ" - проверяется на хотя-бы одно верное значение. Как только оператор находит правду,
 *     он перестает работать.
 *     Тут работает правило "ИЛИ запинается на правде".
 */

const baguette = 0;
const whiteFlag = 3;
const gayPresident = 0;
if (baguette || whiteFlag || gayPresident) {
    console.log('Соболезную, вы из Франции!');
} else {
    console.log('Слава Україні, брате. Ставай до кулемета!');
}
/**
 *  При работе с "ИЛИ" также важно запомнить 2 правила:
 *  1) "ИЛИ" выводит первое правдивое значение.
 *  2) "ИЛИ" выводит последнее значение при ложном исходе.
 */

/**
 *  Как и в самой обычной математике, можно использовать круглые скобки (...) для того, чтобы менять порядок
 *  вычислений.
 *  Их ещё называют группировкой, она имеет наивысшый приоритет.
 */

/**
 *  Оператор отрицания "не" работает таким образом, что он сначала превращает аргумент (к которому он прикреплён)
 *  в логический тип данных - true/false, а уже потом возвращает противоположное значение.
 */
console.log(!0); // -> true