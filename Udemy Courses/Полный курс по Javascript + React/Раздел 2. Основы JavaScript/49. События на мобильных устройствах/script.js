'use strict';

/**
 *  В этом уроке обсуждается такое понятие как "события на мобильных устройствах". Не лишним будет
 *  разобрать такую тему, потомучто сейчас уже идёт эра мобильных устройств и, по статистике,
 *  более 70% посещений сайтов приходится именно на них.
 *  ---
 *  Такие события можно и не встретить в книгах и справочниках, ибо о них упоминают довольно редко,
 *  но при этом они иногда используются.
 *  ---
 *  Самым обычным примером является то, что в мобильных браузерах нет такого понятия, как клик мышью,
 *  наведение и т.д.
 *  В мобильных браузерах есть "тапы" – это когда идёт прикосновение пальцем к сенсору. Но и пальцев
 *  при этом может быть несколько, так как большинство устройств поддерживают функцию multitouch.
 *  ---
 *  !! Мобильные браузеры сами по себе нормально отрабатывают со всеми сайтами. Даже если на уровне
 *  десктопа было установлено событие click, оно будет нормально работать на мобильных устройствах.
 *  JavaScript запускает сразу серию событий, чтобы ничего не пропустить.
 */

/**
 *  Обработчик события 'DOMContentLoaded' – необходим для того, чтобы точно знать, что все DOM-узлы
 *  уже прогрузились и, во время выполнения js-кода, c ними не будет возникать проблем.
 *  Весь существуюший js-код оборачивается в этот обработчик.
 *  ---
 *  !! Можно навешивать этот обработчик как на объект document. так и на объект window. Разницы не существует.
 */
document.addEventListener('DOMContentLoaded', () => {
	const box = document.querySelector('.box');
    
	/**
     *  Всего у мобильных браузеров существует 6 событий и все они начинаются со слова touch:
     *  ---
     *  1) Cобытие 'touchstart' – срабатывает при возникновении касания по конкретному элементу.
     */
	box.addEventListener('touchstart', (e) => {
		/**
         *  !! Когда назначаются мобильные события, рекомендуется всегда объявлять метод e.preventDefault(),
         *  чтобы всегда отменять стандартное поведение браузера.
         */
		e.preventDefault();

		console.log('Touch start!');
	});

	/**
     *  2) Cобытие 'touchmove' – если палец прикасания к элементу начинает двигаться, то каждый раз,
     *  при каждом смещении этого пальца, будет срабатывать событие.
     */
	box.addEventListener('touchmove', (e) => {
		e.preventDefault();

		console.log('Touch move!');
	});

	/**
     *  3) Cобытие 'touchend' – срабатывает тогда, как только палец оторвался от элемента.
     */
	box.addEventListener('touchend', (e) => {
		e.preventDefault();

		console.log('Touch end!');
	});

	/**
     *  4) Cобытие 'touchenter' – будет срабатывать, когда палец ведётся по экрану и наскальзывает
     *  на элемент, на который навешано это событие.
     * 
     *  5) Cобытие 'touchleave' – когда палец скользит по экрану и вышёл за пределы конкретного элемента,
     *  у которого стоит обработчик с этим событием.
     * 
     *  6) Cобытие 'touchcancel' – срабатывает тогда, когда точка прикосновения больше не регистрируется
     *  на поверхности.
     */

	/**
     *  У объекта события есть дополнительные свойства, когда идёт работа с сенсорными устройствами.
     *  Существует 3 главных свойства у объекта event:
     *  ---
     *  1) Cвойство .touches – список всех пальцев, которые на данный момент взаимодействуют с экраном.
     */
	box.addEventListener('touchenter', (e) => {
		e.preventDefault();

		console.log('Touch enter!');
		console.log(e.touches); // -> Touchlist {0: Touch, length: 1}
	});

	/**
     *  2) Cвойство .targetTouches – получить список всех пальцев, которые на данный момент взаимодействуют
     *  с конкретным элементом.
     */
	box.addEventListener('touchleave', (e) => {
		e.preventDefault();

		console.log('Touch leave!');
		console.log(e.targetTouches);
	});

	/**
     *  3) Cвойство .changedTouches – получить список пальцев, которые принимают участие в текущем событии.
     *  Это именно те пальцы, которые совершили назначенное действие.
     */
	box.addEventListener('touchcancel', (e) => {
		e.preventDefault();

		console.log('Touch cancel!');
		console.log(e.changedTouches);
	});

	/**
     *  ~ В реальных проектах новички обычно не создают сложные технологии для мобильных устройств с помощью
     *  подобных конструкций. Для этого есть уже готовые библиотеки, например, "hammer.js".
     */
});