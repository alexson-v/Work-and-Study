'use strict';

/**
 *  В этом уроке обсуждается одна из фишек стандарта ES11, который появился в 2020 году, а именно
 *  оператор нулевого слияния (кратко - Nullish-оператор).
 *  ---
 *  Постановка проблемы: бывает так, что в переменные приходят ложные значения (false), например, 0.
 *  Это может быть даже не ширина/высота, а какой-либо transition или тайминг в анимации.
 *  По-умолчанию, в JavaScript всего 5 сущностей, которые в логическом контексте всегда false: 0, '', null,
 *  undefined, NaN.
 *  Как раз таки в этой ситуации число 0 может подвести, так как оператор "ИЛИ" воспримет его как false.
 *  ---
 *  Можно воспользоваться оператором нулевого слияния. Его смысл в том, что он реагирует не на все неправдивые
 *  значения, а только на null и undefined.
 */

let userName; // -> undefined
/**
 *  Этот оператор похож на оператор "ИЛИ" (||), но он обращает своё внимание на то, что находится, в данном
 *  случае, в переменной userName.
 *  Если в переменной userName будет null или undefined, то будет возвращена строка 'User'.
 */
console.log(userName ?? 'User'); // -> 'User'.

/**
 *  А если в переменную userName попадёт 0, '', NaN или даже false, то Nullish-оператор всё равно выберет
 *  именно её.
 *  Такое поведение расширяет возможности и позволяет не писать кучу условий-проверок.
 */
userName = 0;
console.log(userName ?? 'User'); // -> 0

/**
 *  Поведение Nullish-оператора на практике можно продемонстрировать с помощью функции, где подставляются
 *  аргументы с высотой/шириной DOM-элемента.
 */
const box = document.querySelector('.box');

const newHeight = 0;
const newWidth = 400;

function changeParams(elem, h, w) {
	/**
     *  Nullish-оператор, в том числе и операторы "И", "ИЛИ" и т.д., можно спокойно подставлять в
     *  интерполяцию.
     */
	elem.style.height = `${h ?? 200}px`; // -> Высота: 0px
	elem.style.width = `${w ?? 200}px`;
}
changeParams(box, newHeight, newWidth);

/**
 *  Особенности оператора нулевого слияния:
 *  1) Из этих операторов можно выстраивать цепочку для получения первого реально существующего значения.
 *  Иногда операция зависит сразу от нескольких параметров и необходимо, чтобы существовал хотябы один из них.
 */
let userFirstName;
let userLastName;
console.log(userFirstName ?? userLastName ?? 'User'); // -> 'User', ибо у всех переменных значение 'undefined'.

/**
 *  2) У Nullish-оператора и оператора 'ИЛИ' достаточно низкий приоритет выполнения (4), поэтому необходимо очень
 *  аккуратно подходить к вычислениям с ним.
 *  3) Логические операторы "И" и "ИЛИ" несовместимы с Nullish-оператором. Интерпретатор будет выдавать ошибку.
 *  Это было сделано, чтобы при замене оператора "ИЛИ" на Nullish другие разработчики не пропустили такие моменты
 *  комбинаций, иначе можно было бы получить довольно странное поведение.
 */
console.log(/** userFirstName && **/ userLastName ?? 'User'); // -> Ошибка

/**
 *  Если говорить насчёт частоты его использования, то эта фишка довольно новая. Она не будет поддерживаться
 *  старыми браузерами, но с этим можно будет разобраться (информация об этом дальше по курсу).
 *  С технической точки зрения, всё впорядке. Всё больше разработчиков начинают применять Nullish-оператор
 *  в непростых местах кода.
 */