// 2. Лексическая структура

// Это однострочный комментарий.
/* Это тоже комментарий */ // и ещё один комментарий
/* Это многострочный комментарий. Добавочные символы * в начале каждой
 * строки не являются обязательной частью синтаксиса;
 * просто они классно выглядят!
*/


12 // Число двенадцать
1.2 // Число одна целая и две десятых
"hello world" // Строка текста
'Hi' // Ещё одна строка
true // Булевское значение
false // Другое булевское значение
null // Отсутствие объекта


// Все приведённые далее идентификаторы являются допустимыми:
i
my_variable_name
v13
_dummy
$str


// В качестве констант и переменных можно применять математические символы и неанглоязычные слова.


let café = 1; // Определение переменной с использованием символа Unicode
caf\u00e9     // => 1; доступ к переменной с применением управляющей последовательности
caf\u{E9}     // => 1; ещё одна форма той же управляющей последовательности
console.log("\u{1F600}"); // Выводит эмотикон с улыбающейся физиономией


const café = 1; // Эта константа имеет имя "caf\u{e9}"
const café = 1; // Это другая константа: "cafe\u{301}"
café            // => 1: эта константа имеет одно значение
café            // => 2: эта с виду неотличимая константа имеет другое значение, поэтому с этим осторожнее


a = 3; // Поскольку два оператора находятся в отдельных строках, первую точку с запятой можно было бы опустить.
b = 4;

a = 3; b = 4; // Однако при следующей записи первая точка с запятой обязательна.


let a          // Интерпретатор JavaScript воспринимает его подобно следующему коду.
a
=
3
console.log(a)

let a; a = 3; console.log(a); // В данном случае всё хорошо, но это лишь исключение

let y = x + f                 // Но тут автор забыл поставить точку с запятой, и вот что делает JavaScript..
(a + b).toString()

let y = x + f (a + b).toString(); // JavaScript просто напросто смешал 2 строки в одну и мы получаем не тот результат.

let x = 0                                 // Точка с запятой здесь опущена
; [x, x + 1, x + 2].forEach(console.log)  // Защитная ; сохраняет этот оператор отдельным