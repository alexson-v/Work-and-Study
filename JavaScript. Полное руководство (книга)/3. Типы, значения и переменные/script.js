// 3. Типы, значения и переменные

// 3.1. Обзор и определения

12, "Hello World", true, false, // Элементарные типы JavaScript включают числа, строки текста и булевские истинностные
// значения, также сюда относятся специальные величины null и undefined, но они не являются ничем из вышеперечисленного.

Symbol // Новый специализированный тип, который делает возможным определение языковых расширений, не причиняя вреда
       // обратной совместимости


// Любое значение JavaScript, которое отличается от числа, строки, булевского значения, символа, null и undefined,
// представляет собой объект. Объект - это коллекция свойств, где каждое свойство имеет имя и значение.
// Обыкновенные объект является неупорядоченной коллекцией именованных значений.


// В языке также определён специальный вид объекта, называемый массивом, который представляет упорядоченную
// коллекцию пронумерованных значений.


Set // Этот объект представляет множество значений.
Map // Этот же представляет отображение ключей на значения.

RegExp // Представляет текстовые шаблоны и делает возможными сложно устроенные операции сопоставления,
       // поиска и замены на строках.
Date   // Представляет дату и время, а также поддерживает элементарную арифметику с датами.
Error // ..и его подтипы представляют ошибки, которые могут возникать при выполнении кода JavaScript.


a.sort(); // Объектно-ориентированная версия sort(a)


const fixate = 3; // Константы объявляются с помощью const,
let fixate1 = 5; // а переменные посредством let (или var в более старом коде JavaScript).



// 3.2. Числа

// Когда числа находится прямо в программе JavaScript, оно называется числовым литералом.
// Любой числовой литерал может предваряться знаком (-), чтобы делать число отрицательным.

// 3.2.1. Целочисленные литералы

// В программе JavaScript целое десятичное число записывается как последовательность цифр, например:
0
3
10000000

// Вот примеры шестнадцатеричных целочисленных литералов:
0xff       // => 255: (15 * 16 + 15)
0xBADCAFE  // => 195939070

// В ES6 и последующих версиях целые числа можно также выражать в двоичном (с основанием 2) иливосьмеричном
// (с основанием 8) виде с применением префиксов 0b и 0o (или 0B и 0O) вместо 0x:
0b10101    // => 21: (1*16 + 0*8 + 1*4 + 0*2 + 1*1)
0o377      // => 255: (3*64 + 7*8 + 7*1)



// 3.2.2. Числовые литералы с плавающей точкой

3.14
2345.6789
.333333333333333333
6.02e23               // 6.02 * 10(23 степени)
1.4738223E-32         // 1.4738223 * 10(-32 степени)

// В длинных числовых литералах можно применять подчёркивания, чтобы разбивать их на порции,
// которые легче для восприятия:
let billion = 1_000_000_000;   // Подчёркивание как разделитель тысяч.
let bytes = 0x89_AB_CD_EF;     // Подчёркивание как разделитель байтов.
let bits = 0b0001_1101_0111;   // Подчёркивание как разделитель полубайтов.
let fraction = 0.123_456_789;  // Работает и в дробной части.